version: 2.1

feature_only: &feature_only
  filters:
    branches:
      ignore: main

main_only: &main_only
  filters:
    branches:
      only: main

orbs:
  terraform: circleci/terraform@3.2.1
  gcp-cli: circleci/gcp-cli@3.1.1
  docker-orb: circleci/docker@2.4.0
  go: circleci/go@3.0.2

jobs:
  lint:
    docker:
      - image: cimg/go:1.24
    resource_class: medium
    steps:
      - checkout
      - run: |
          curl -sSfL https://raw.githubusercontent.com/golangci/golangci-lint/HEAD/install.sh | sh -s -- -b $(go env GOPATH)/bin v2.1.5
          golangci-lint --version
          make lint
      - terraform/install:
          terraform_version: 1.3.4
      - terraform/validate:
          path: ./terraform
      - terraform/fmt:
          path: ./terraform
  test:
    machine:
      image: ubuntu-2004:current
    resource_class: medium
    steps:
      - checkout
      - go/install:
          version: '1.24.x'
      - go/mod-download-cached
      - run: make test
  
  terraform_plan:
    executor: terraform/default
    environment:
      GOOGLE_APPLICATION_CREDENTIALS: ../gcp_key.json
    steps:
      - checkout
      - run: |
          echo $GCLOUD_SERVICE_KEY >> gcp_key.json
          cd terraform && \
          echo 'project = "'$GCP_PROJECT'"' >> terraform.tfvars && \
          echo 'region = "us-central1"' >> terraform.tfvars && \
          echo 'discord_token = "'$DISCORD_TOKEN'"' >> terraform.tfvars && \
          echo 'discord_channels = "'$PERSONAL_CHANNEL_ID,$USBC_APPROVED_BALL_LIST_CHANNEL_ID,$BIDDLE_CHANNEL_ID'"' >> terraform.tfvars && \
          echo 'circle_sha1 = "'$CIRCLE_SHA1'"' >> terraform.tfvars && \
          echo 'cockroachdb_url = "'$COCKROACHDB_URL'"' >> terraform.tfvars
      - terraform/init:
          path: ./terraform
      - terraform/plan:
          path: ./terraform
          var_file: terraform.tfvars
  
  terraform_apply:
    executor: terraform/default
    environment:
      GOOGLE_APPLICATION_CREDENTIALS: ../gcp_key.json
    steps:
      - checkout
      - run: |
          echo $GCLOUD_SERVICE_KEY >> gcp_key.json
          cd terraform && \
          echo 'project = "'$GCP_PROJECT'"' >> terraform.tfvars && \
          echo 'region = "us-central1"' >> terraform.tfvars && \
          echo 'discord_token = "'$DISCORD_TOKEN'"' >> terraform.tfvars && \
          echo 'discord_channels = "'$PERSONAL_CHANNEL_ID,$USBC_APPROVED_BALL_LIST_CHANNEL_ID,$BIDDLE_CHANNEL_ID'"' >> terraform.tfvars && \
          echo 'circle_sha1 = "'$CIRCLE_SHA1'"' >> terraform.tfvars && \
          echo 'cockroachdb_url = "'$COCKROACHDB_URL'"' >> terraform.tfvars
      - terraform/init:
          path: ./terraform
      - terraform/apply:
          path: ./terraform
          var_file: terraform.tfvars
  
  build-and-push-image:
    machine:
      image: ubuntu-2004:current
    steps:
      - checkout
      - gcp-cli/setup:
          version: 412.0.0
      - docker-orb/install-docker
      - run:
          name: create artifact repository
          command: |
            gcloud artifacts repositories create abl --repository-format=docker \
              --location=${GOOGLE_COMPUTE_REGION} || true
      - run:
          name: configure docker auth
          command: gcloud auth configure-docker ${GOOGLE_COMPUTE_REGION}-docker.pkg.dev
      - run:
          name: build and push image
          command: |
            make build-image
            make push-image

workflows:
  feature-branch:
    jobs:
      - lint:
          <<: *feature_only
      - test:
          <<: *feature_only
      - terraform_plan:
          <<: *feature_only

  deploy:
    jobs:
      - lint:
          <<: *main_only
      - test:
          <<: *main_only
      - terraform_plan:
          <<: *main_only
          requires:
            - lint
            - test
      - build-and-push-image:
          <<: *main_only
          requires:
            - lint
            - test
      - approve_terraform_plan:
          <<: *main_only
          name: approve_terraform_plan
          type: approval
          requires:
            - terraform_plan
            - build-and-push-image
      - terraform_apply:
          <<: *main_only
          requires:
            - approve_terraform_plan
          filters:
            branches:
              only:
                - main
