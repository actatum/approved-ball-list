// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package balls

import (
	"context"
	"sync"
)

// Ensure, that USBCServiceMock does implement USBCService.
// If this is not the case, regenerate this file with moq.
var _ USBCService = &USBCServiceMock{}

// USBCServiceMock is a mock implementation of USBCService.
//
//	func TestSomethingThatUsesUSBCService(t *testing.T) {
//
//		// make and configure a mocked USBCService
//		mockedUSBCService := &USBCServiceMock{
//			ListBallsFunc: func(ctx context.Context, brand Brand) ([]Ball, error) {
//				panic("mock out the ListBalls method")
//			},
//		}
//
//		// use mockedUSBCService in code that requires USBCService
//		// and then make assertions.
//
//	}
type USBCServiceMock struct {
	// ListBallsFunc mocks the ListBalls method.
	ListBallsFunc func(ctx context.Context, brand Brand) ([]Ball, error)

	// calls tracks calls to the methods.
	calls struct {
		// ListBalls holds details about calls to the ListBalls method.
		ListBalls []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Brand is the brand argument value.
			Brand Brand
		}
	}
	lockListBalls sync.RWMutex
}

// ListBalls calls ListBallsFunc.
func (mock *USBCServiceMock) ListBalls(ctx context.Context, brand Brand) ([]Ball, error) {
	if mock.ListBallsFunc == nil {
		panic("USBCServiceMock.ListBallsFunc: method is nil but USBCService.ListBalls was just called")
	}
	callInfo := struct {
		Ctx   context.Context
		Brand Brand
	}{
		Ctx:   ctx,
		Brand: brand,
	}
	mock.lockListBalls.Lock()
	mock.calls.ListBalls = append(mock.calls.ListBalls, callInfo)
	mock.lockListBalls.Unlock()
	return mock.ListBallsFunc(ctx, brand)
}

// ListBallsCalls gets all the calls that were made to ListBalls.
// Check the length with:
//
//	len(mockedUSBCService.ListBallsCalls())
func (mock *USBCServiceMock) ListBallsCalls() []struct {
	Ctx   context.Context
	Brand Brand
} {
	var calls []struct {
		Ctx   context.Context
		Brand Brand
	}
	mock.lockListBalls.RLock()
	calls = mock.calls.ListBalls
	mock.lockListBalls.RUnlock()
	return calls
}
