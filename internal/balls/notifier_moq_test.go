// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package balls

import (
	"context"
	"sync"
)

// Ensure, that NotifierMock does implement Notifier.
// If this is not the case, regenerate this file with moq.
var _ Notifier = &NotifierMock{}

// NotifierMock is a mock implementation of Notifier.
//
//	func TestSomethingThatUsesNotifier(t *testing.T) {
//
//		// make and configure a mocked Notifier
//		mockedNotifier := &NotifierMock{
//			NotifyFunc: func(ctx context.Context, approvedBalls []Ball) error {
//				panic("mock out the Notify method")
//			},
//		}
//
//		// use mockedNotifier in code that requires Notifier
//		// and then make assertions.
//
//	}
type NotifierMock struct {
	// NotifyFunc mocks the Notify method.
	NotifyFunc func(ctx context.Context, approvedBalls []Ball) error

	// calls tracks calls to the methods.
	calls struct {
		// Notify holds details about calls to the Notify method.
		Notify []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ApprovedBalls is the approvedBalls argument value.
			ApprovedBalls []Ball
		}
	}
	lockNotify sync.RWMutex
}

// Notify calls NotifyFunc.
func (mock *NotifierMock) Notify(ctx context.Context, approvedBalls []Ball) error {
	if mock.NotifyFunc == nil {
		panic("NotifierMock.NotifyFunc: method is nil but Notifier.Notify was just called")
	}
	callInfo := struct {
		Ctx           context.Context
		ApprovedBalls []Ball
	}{
		Ctx:           ctx,
		ApprovedBalls: approvedBalls,
	}
	mock.lockNotify.Lock()
	mock.calls.Notify = append(mock.calls.Notify, callInfo)
	mock.lockNotify.Unlock()
	return mock.NotifyFunc(ctx, approvedBalls)
}

// NotifyCalls gets all the calls that were made to Notify.
// Check the length with:
//
//	len(mockedNotifier.NotifyCalls())
func (mock *NotifierMock) NotifyCalls() []struct {
	Ctx           context.Context
	ApprovedBalls []Ball
} {
	var calls []struct {
		Ctx           context.Context
		ApprovedBalls []Ball
	}
	mock.lockNotify.RLock()
	calls = mock.calls.Notify
	mock.lockNotify.RUnlock()
	return calls
}
