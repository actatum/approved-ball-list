// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package balls

import (
	"context"
	"sync"
)

// Ensure, that StoreMock does implement Store.
// If this is not the case, regenerate this file with moq.
var _ Store = &StoreMock{}

// StoreMock is a mock implementation of Store.
//
//	func TestSomethingThatUsesStore(t *testing.T) {
//
//		// make and configure a mocked Store
//		mockedStore := &StoreMock{
//			AddBallsFunc: func(ctx context.Context, balls []Ball) error {
//				panic("mock out the AddBalls method")
//			},
//			GetAllBallsFunc: func(ctx context.Context, filter BallFilter) ([]Ball, error) {
//				panic("mock out the GetAllBalls method")
//			},
//		}
//
//		// use mockedStore in code that requires Store
//		// and then make assertions.
//
//	}
type StoreMock struct {
	// AddBallsFunc mocks the AddBalls method.
	AddBallsFunc func(ctx context.Context, balls []Ball) error

	// GetAllBallsFunc mocks the GetAllBalls method.
	GetAllBallsFunc func(ctx context.Context, filter BallFilter) ([]Ball, error)

	// calls tracks calls to the methods.
	calls struct {
		// AddBalls holds details about calls to the AddBalls method.
		AddBalls []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Balls is the balls argument value.
			Balls []Ball
		}
		// GetAllBalls holds details about calls to the GetAllBalls method.
		GetAllBalls []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Filter is the filter argument value.
			Filter BallFilter
		}
	}
	lockAddBalls    sync.RWMutex
	lockGetAllBalls sync.RWMutex
}

// AddBalls calls AddBallsFunc.
func (mock *StoreMock) AddBalls(ctx context.Context, balls []Ball) error {
	if mock.AddBallsFunc == nil {
		panic("StoreMock.AddBallsFunc: method is nil but Store.AddBalls was just called")
	}
	callInfo := struct {
		Ctx   context.Context
		Balls []Ball
	}{
		Ctx:   ctx,
		Balls: balls,
	}
	mock.lockAddBalls.Lock()
	mock.calls.AddBalls = append(mock.calls.AddBalls, callInfo)
	mock.lockAddBalls.Unlock()
	return mock.AddBallsFunc(ctx, balls)
}

// AddBallsCalls gets all the calls that were made to AddBalls.
// Check the length with:
//
//	len(mockedStore.AddBallsCalls())
func (mock *StoreMock) AddBallsCalls() []struct {
	Ctx   context.Context
	Balls []Ball
} {
	var calls []struct {
		Ctx   context.Context
		Balls []Ball
	}
	mock.lockAddBalls.RLock()
	calls = mock.calls.AddBalls
	mock.lockAddBalls.RUnlock()
	return calls
}

// GetAllBalls calls GetAllBallsFunc.
func (mock *StoreMock) GetAllBalls(ctx context.Context, filter BallFilter) ([]Ball, error) {
	if mock.GetAllBallsFunc == nil {
		panic("StoreMock.GetAllBallsFunc: method is nil but Store.GetAllBalls was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Filter BallFilter
	}{
		Ctx:    ctx,
		Filter: filter,
	}
	mock.lockGetAllBalls.Lock()
	mock.calls.GetAllBalls = append(mock.calls.GetAllBalls, callInfo)
	mock.lockGetAllBalls.Unlock()
	return mock.GetAllBallsFunc(ctx, filter)
}

// GetAllBallsCalls gets all the calls that were made to GetAllBalls.
// Check the length with:
//
//	len(mockedStore.GetAllBallsCalls())
func (mock *StoreMock) GetAllBallsCalls() []struct {
	Ctx    context.Context
	Filter BallFilter
} {
	var calls []struct {
		Ctx    context.Context
		Filter BallFilter
	}
	mock.lockGetAllBalls.RLock()
	calls = mock.calls.GetAllBalls
	mock.lockGetAllBalls.RUnlock()
	return calls
}
