// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package mocks

import (
	"context"
	"sync"

	"github.com/actatum/approved-ball-list/internal/balls"
)

// Ensure, that NotificationServiceMock does implement balls.NotificationService.
// If this is not the case, regenerate this file with moq.
var _ balls.NotificationService = &NotificationServiceMock{}

// NotificationServiceMock is a mock implementation of balls.NotificationService.
//
//	func TestSomethingThatUsesNotificationService(t *testing.T) {
//
//		// make and configure a mocked balls.NotificationService
//		mockedNotificationService := &NotificationServiceMock{
//			SendNotificationFunc: func(ctx context.Context, approvedBalls []balls.Ball) error {
//				panic("mock out the SendNotification method")
//			},
//		}
//
//		// use mockedNotificationService in code that requires balls.NotificationService
//		// and then make assertions.
//
//	}
type NotificationServiceMock struct {
	// SendNotificationFunc mocks the SendNotification method.
	SendNotificationFunc func(ctx context.Context, approvedBalls []balls.Ball) error

	// calls tracks calls to the methods.
	calls struct {
		// SendNotification holds details about calls to the SendNotification method.
		SendNotification []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ApprovedBalls is the approvedBalls argument value.
			ApprovedBalls []balls.Ball
		}
	}
	lockSendNotification sync.RWMutex
}

// SendNotification calls SendNotificationFunc.
func (mock *NotificationServiceMock) SendNotification(ctx context.Context, approvedBalls []balls.Ball) error {
	if mock.SendNotificationFunc == nil {
		panic("NotificationServiceMock.SendNotificationFunc: method is nil but NotificationService.SendNotification was just called")
	}
	callInfo := struct {
		Ctx           context.Context
		ApprovedBalls []balls.Ball
	}{
		Ctx:           ctx,
		ApprovedBalls: approvedBalls,
	}
	mock.lockSendNotification.Lock()
	mock.calls.SendNotification = append(mock.calls.SendNotification, callInfo)
	mock.lockSendNotification.Unlock()
	return mock.SendNotificationFunc(ctx, approvedBalls)
}

// SendNotificationCalls gets all the calls that were made to SendNotification.
// Check the length with:
//
//	len(mockedNotificationService.SendNotificationCalls())
func (mock *NotificationServiceMock) SendNotificationCalls() []struct {
	Ctx           context.Context
	ApprovedBalls []balls.Ball
} {
	var calls []struct {
		Ctx           context.Context
		ApprovedBalls []balls.Ball
	}
	mock.lockSendNotification.RLock()
	calls = mock.calls.SendNotification
	mock.lockSendNotification.RUnlock()
	return calls
}
