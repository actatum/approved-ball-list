// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package mocks

import (
	"context"
	"sync"

	"github.com/actatum/approved-ball-list/internal/abl"
)

// Ensure, that NotifierMock does implement abl.Notifier.
// If this is not the case, regenerate this file with moq.
var _ abl.Notifier = &NotifierMock{}

// NotifierMock is a mock implementation of abl.Notifier.
//
//	func TestSomethingThatUsesNotifier(t *testing.T) {
//
//		// make and configure a mocked abl.Notifier
//		mockedNotifier := &NotifierMock{
//			CloseFunc: func() error {
//				panic("mock out the Close method")
//			},
//			NotifyFunc: func(ctx context.Context, notifications []abl.Notification) error {
//				panic("mock out the Notify method")
//			},
//		}
//
//		// use mockedNotifier in code that requires abl.Notifier
//		// and then make assertions.
//
//	}
type NotifierMock struct {
	// CloseFunc mocks the Close method.
	CloseFunc func() error

	// NotifyFunc mocks the Notify method.
	NotifyFunc func(ctx context.Context, notifications []abl.Notification) error

	// calls tracks calls to the methods.
	calls struct {
		// Close holds details about calls to the Close method.
		Close []struct {
		}
		// Notify holds details about calls to the Notify method.
		Notify []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Notifications is the notifications argument value.
			Notifications []abl.Notification
		}
	}
	lockClose  sync.RWMutex
	lockNotify sync.RWMutex
}

// Close calls CloseFunc.
func (mock *NotifierMock) Close() error {
	if mock.CloseFunc == nil {
		panic("NotifierMock.CloseFunc: method is nil but Notifier.Close was just called")
	}
	callInfo := struct {
	}{}
	mock.lockClose.Lock()
	mock.calls.Close = append(mock.calls.Close, callInfo)
	mock.lockClose.Unlock()
	return mock.CloseFunc()
}

// CloseCalls gets all the calls that were made to Close.
// Check the length with:
//
//	len(mockedNotifier.CloseCalls())
func (mock *NotifierMock) CloseCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockClose.RLock()
	calls = mock.calls.Close
	mock.lockClose.RUnlock()
	return calls
}

// Notify calls NotifyFunc.
func (mock *NotifierMock) Notify(ctx context.Context, notifications []abl.Notification) error {
	if mock.NotifyFunc == nil {
		panic("NotifierMock.NotifyFunc: method is nil but Notifier.Notify was just called")
	}
	callInfo := struct {
		Ctx           context.Context
		Notifications []abl.Notification
	}{
		Ctx:           ctx,
		Notifications: notifications,
	}
	mock.lockNotify.Lock()
	mock.calls.Notify = append(mock.calls.Notify, callInfo)
	mock.lockNotify.Unlock()
	return mock.NotifyFunc(ctx, notifications)
}

// NotifyCalls gets all the calls that were made to Notify.
// Check the length with:
//
//	len(mockedNotifier.NotifyCalls())
func (mock *NotifierMock) NotifyCalls() []struct {
	Ctx           context.Context
	Notifications []abl.Notification
} {
	var calls []struct {
		Ctx           context.Context
		Notifications []abl.Notification
	}
	mock.lockNotify.RLock()
	calls = mock.calls.Notify
	mock.lockNotify.RUnlock()
	return calls
}
