// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package mocks

import (
	"context"
	"sync"

	"github.com/actatum/approved-ball-list/internal/abl"
)

// Ensure, that USBCClientMock does implement abl.USBCClient.
// If this is not the case, regenerate this file with moq.
var _ abl.USBCClient = &USBCClientMock{}

// USBCClientMock is a mock implementation of abl.USBCClient.
//
//	func TestSomethingThatUsesUSBCClient(t *testing.T) {
//
//		// make and configure a mocked abl.USBCClient
//		mockedUSBCClient := &USBCClientMock{
//			CloseFunc: func()  {
//				panic("mock out the Close method")
//			},
//			GetApprovedBallListFunc: func(ctx context.Context) ([]abl.Ball, error) {
//				panic("mock out the GetApprovedBallList method")
//			},
//		}
//
//		// use mockedUSBCClient in code that requires abl.USBCClient
//		// and then make assertions.
//
//	}
type USBCClientMock struct {
	// CloseFunc mocks the Close method.
	CloseFunc func()

	// GetApprovedBallListFunc mocks the GetApprovedBallList method.
	GetApprovedBallListFunc func(ctx context.Context) ([]abl.Ball, error)

	// calls tracks calls to the methods.
	calls struct {
		// Close holds details about calls to the Close method.
		Close []struct {
		}
		// GetApprovedBallList holds details about calls to the GetApprovedBallList method.
		GetApprovedBallList []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
		}
	}
	lockClose               sync.RWMutex
	lockGetApprovedBallList sync.RWMutex
}

// Close calls CloseFunc.
func (mock *USBCClientMock) Close() {
	if mock.CloseFunc == nil {
		panic("USBCClientMock.CloseFunc: method is nil but USBCClient.Close was just called")
	}
	callInfo := struct {
	}{}
	mock.lockClose.Lock()
	mock.calls.Close = append(mock.calls.Close, callInfo)
	mock.lockClose.Unlock()
	mock.CloseFunc()
}

// CloseCalls gets all the calls that were made to Close.
// Check the length with:
//
//	len(mockedUSBCClient.CloseCalls())
func (mock *USBCClientMock) CloseCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockClose.RLock()
	calls = mock.calls.Close
	mock.lockClose.RUnlock()
	return calls
}

// GetApprovedBallList calls GetApprovedBallListFunc.
func (mock *USBCClientMock) GetApprovedBallList(ctx context.Context) ([]abl.Ball, error) {
	if mock.GetApprovedBallListFunc == nil {
		panic("USBCClientMock.GetApprovedBallListFunc: method is nil but USBCClient.GetApprovedBallList was just called")
	}
	callInfo := struct {
		Ctx context.Context
	}{
		Ctx: ctx,
	}
	mock.lockGetApprovedBallList.Lock()
	mock.calls.GetApprovedBallList = append(mock.calls.GetApprovedBallList, callInfo)
	mock.lockGetApprovedBallList.Unlock()
	return mock.GetApprovedBallListFunc(ctx)
}

// GetApprovedBallListCalls gets all the calls that were made to GetApprovedBallList.
// Check the length with:
//
//	len(mockedUSBCClient.GetApprovedBallListCalls())
func (mock *USBCClientMock) GetApprovedBallListCalls() []struct {
	Ctx context.Context
} {
	var calls []struct {
		Ctx context.Context
	}
	mock.lockGetApprovedBallList.RLock()
	calls = mock.calls.GetApprovedBallList
	mock.lockGetApprovedBallList.RUnlock()
	return calls
}
